[{"E:\\Full stack web development course\\quora-working\\frontend\\src\\index.js":"1","E:\\Full stack web development course\\quora-working\\frontend\\src\\store.js":"2","E:\\Full stack web development course\\quora-working\\frontend\\src\\serviceWorker.js":"3","E:\\Full stack web development course\\quora-working\\frontend\\src\\App.js":"4","E:\\Full stack web development course\\quora-working\\frontend\\src\\Reducer\\User.js":"5","E:\\Full stack web development course\\quora-working\\frontend\\src\\Action\\User.js":"6","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\AllUser.js":"7","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\index.js":"8","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\AllSpaces\\index.js":"9","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\auth\\index.js":"10","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Quorans\\index.js":"11","E:\\Full stack web development course\\quora-working\\frontend\\src\\Constant\\User.js":"12","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\QHeader.js":"13","E:\\Full stack web development course\\quora-working\\frontend\\src\\Utils\\AlertModal.js":"14","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Quora.js":"15","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Quorans\\UserFeed.js":"16","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\auth\\Login.js":"17","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Widget.js":"18","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Sidebar.js":"19","E:\\Full stack web development course\\quora-working\\frontend\\src\\Utils\\decodedToken.js":"20","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Feed.js":"21","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Quorans\\UserPost.js":"22","E:\\Full stack web development course\\quora-working\\frontend\\src\\firebase.js":"23","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\SidebarOptions.js":"24","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\WidgetContent.js":"25","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Post.js":"26","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\QuorBox.js":"27","E:\\Full stack web development course\\quora-working\\frontend\\src\\Utils\\timeAgo.js":"28","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\AddQuestionModel.js":"29"},{"size":678,"mtime":1682114950337,"results":"30","hashOfConfig":"31"},{"size":957,"mtime":1682107111055,"results":"32","hashOfConfig":"31"},{"size":5141,"mtime":1682107111054,"results":"33","hashOfConfig":"31"},{"size":3128,"mtime":1682107111042,"results":"34","hashOfConfig":"31"},{"size":1986,"mtime":1682107111043,"results":"35","hashOfConfig":"31"},{"size":5457,"mtime":1682107111042,"results":"36","hashOfConfig":"31"},{"size":3590,"mtime":1682107111046,"results":"37","hashOfConfig":"31"},{"size":166,"mtime":1682107111052,"results":"38","hashOfConfig":"31"},{"size":1835,"mtime":1682107111046,"results":"39","hashOfConfig":"31"},{"size":166,"mtime":1682107111052,"results":"40","hashOfConfig":"31"},{"size":1351,"mtime":1682107111050,"results":"41","hashOfConfig":"31"},{"size":786,"mtime":1682107111043,"results":"42","hashOfConfig":"31"},{"size":3347,"mtime":1682926437295,"results":"43","hashOfConfig":"31"},{"size":2871,"mtime":1682107111043,"results":"44","hashOfConfig":"31"},{"size":491,"mtime":1682107111049,"results":"45","hashOfConfig":"31"},{"size":1772,"mtime":1682107111049,"results":"46","hashOfConfig":"31"},{"size":4957,"mtime":1682930045973,"results":"47","hashOfConfig":"31"},{"size":382,"mtime":1682107111051,"results":"48","hashOfConfig":"31"},{"size":242,"mtime":1682107111050,"results":"49","hashOfConfig":"31"},{"size":340,"mtime":1682107111044,"results":"50","hashOfConfig":"31"},{"size":1087,"mtime":1682107111047,"results":"51","hashOfConfig":"31"},{"size":8127,"mtime":1682107111049,"results":"52","hashOfConfig":"31"},{"size":619,"mtime":1682107111053,"results":"53","hashOfConfig":"31"},{"size":2643,"mtime":1682107111051,"results":"54","hashOfConfig":"31"},{"size":2432,"mtime":1682107111051,"results":"55","hashOfConfig":"31"},{"size":7886,"mtime":1682107111047,"results":"56","hashOfConfig":"31"},{"size":1022,"mtime":1682924827622,"results":"57","hashOfConfig":"31"},{"size":324,"mtime":1682107111044,"results":"58","hashOfConfig":"31"},{"size":4916,"mtime":1682925447646,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"x34lwc",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},"E:\\Full stack web development course\\quora-working\\frontend\\src\\index.js",[],["125","126"],"E:\\Full stack web development course\\quora-working\\frontend\\src\\store.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\serviceWorker.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\App.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\Reducer\\User.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\Action\\User.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\AllUser.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\index.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\AllSpaces\\index.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\auth\\index.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Quorans\\index.js",["127","128"],"import React from 'react'\r\nimport QHeader from '../QHeader'\r\nimport Sidebar from '../Sidebar'\r\nimport Widget from '../Widget'\r\nimport UserFeed from './UserFeed'\r\n\r\nfunction Index() {\r\n    return (\r\n        <div className=\"quora\">\r\n      <QHeader />\r\n      <div className=\"quora__contents\">\r\n        <div style = {{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n        }} className=\"quora__content\">\r\n          <div style = {{\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            padding: \"10px 0\",\r\n            border: \"1px solid lightgray\",\r\n            borderRadius: \"5px\",\r\n            backgroundColor: \"white\"\r\n          }} className = 'torch'>\r\n            <img style = {{\r\n            objectFit: \"contain\"\r\n          }} width = {200} alt = 'spaces' src = 'https://qsf.fs.quoracdn.net/-4-ans_frontend_assets.images.empty_states.dormant_darkmode.png-26-de0e3d9c488b2b12.png'  />\r\n          <h2>Add 5 topics you know about</h2>\r\n          <p>Add topics for a customized feed with questions you can answer.\r\n</p>\r\n          </div>\r\n          {/* <Sidebar /> */}\r\n          \r\n          {/* <Widget /> */}\r\n          <UserFeed />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Index\r\n","E:\\Full stack web development course\\quora-working\\frontend\\src\\Constant\\User.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\QHeader.js",["129","130"],"import React from \"react\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport FeaturedPlayListOutlinedIcon from \"@material-ui/icons/FeaturedPlayListOutlined\";\r\nimport AssignmentTurnedInOutlinedIcon from \"@material-ui/icons/AssignmentTurnedInOutlined\";\r\nimport PeopleAltOutlinedIcon from \"@material-ui/icons/PeopleAltOutlined\";\r\nimport NotificationsOutlinedIcon from \"@material-ui/icons/NotificationsOutlined\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n// import logo from \"./img/QAS logo.png\";\r\nimport \"react-responsive-modal/styles.css\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport \"./QHeader.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import db, { auth } from \"../firebase\";\r\n\r\n\r\nimport { logout } from \"../../Action/User\";\r\n\r\nimport { AddQuestion } from \"./AddQuestionModel\";\r\n\r\nfunction QHeader() {\r\n  // const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n  // console.log(userLogin?.userInfo?.userId);\r\n\r\n  const Close = (\r\n    <CloseIcon\r\n      style={{\r\n        color: \"red\",\r\n        border: \" 2px solid lightgray\",\r\n        borderRadius: \"3px\",\r\n      }}\r\n    />\r\n  );\r\n\r\n  const handleLogout = () => {\r\n\r\n    dispatch(logout());\r\n    //alert(\"Logged out successfully\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"qHeader\">\r\n      <div className=\"qHeader-content\">\r\n        <div className=\"qHeader__logo\">\r\n          <img\r\n            src=\"https://video-public.canva.com/VAD8lt3jPyI/v/ec7205f25c.gif\"\r\n            alt=\"logo\"\r\n          />\r\n        </div>\r\n        <div className=\"qHeader__icons\">\r\n          <div onClick={() => window.location.href = '/'} className=\"active qHeader__icon\">\r\n            <HomeIcon />\r\n          </div>\r\n          <div onClick={() => window.location.href = '/allSpaces'} className=\"qHeader__icon\">\r\n            <FeaturedPlayListOutlinedIcon />\r\n          </div>\r\n          <div onClick={() => window.location.href = '/myQuestions'} className=\"qHeader__icon\">\r\n            <AssignmentTurnedInOutlinedIcon />\r\n          </div>\r\n          <div onClick={() => window.location.href = '/allUsers'} className=\"qHeader__icon\">\r\n            <PeopleAltOutlinedIcon />\r\n          </div>\r\n          <div onClick={() => window.location.href = '/notifications'} className=\"qHeader__icon\">\r\n            <NotificationsOutlinedIcon />\r\n          </div>\r\n        </div>\r\n        <div className=\"qHeader__input\">\r\n          <SearchIcon />\r\n          <input type=\"text\" placeholder=\"Search Quora\" />\r\n        </div>\r\n        <div className=\"qHeader__Rem\">\r\n          <div\r\n            style={{\r\n              border: \"1px solid lightgray\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n            className=\"qHeader__avatar\"\r\n          >\r\n            <Avatar\r\n              onClick={handleLogout}\r\n              className=\"Avatar\"\r\n              src={\r\n                \"http://tinygraphs.com/labs/isogrids/hexa16/tinygraphs?theme=heatwave&numcolors=4&size=220&fmt=svg\"\r\n              }\r\n            />\r\n          </div>\r\n          {/* adding AddQuestion model file here */}\r\n          <AddQuestion title='addQuestion' />\r\n          {/* <Button onClick={() => setIsModalOpen(true)}>Add Question</Button> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QHeader;\r\n","E:\\Full stack web development course\\quora-working\\frontend\\src\\Utils\\AlertModal.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Quora.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Quorans\\UserFeed.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\auth\\Login.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Widget.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Sidebar.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\Utils\\decodedToken.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Feed.js",["131"],"import React, { useEffect, useState } from \"react\";\r\nimport QuorBox from \"./QuorBox\";\r\nimport \"./Feed.css\";\r\nimport Post from \"./Post\";\r\nimport db from \"../../firebase\";\r\nimport axios from \"axios\";\r\nimport { token } from \"../../Utils/decodedToken\";\r\n\r\nfunction Feed() {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: token,\r\n      },\r\n    };\r\n    if (token !== \"\") {\r\n      axios.get(\"/api/questions\", config).then((res) => {\r\n        setPosts(res.data.reverse());\r\n        console.log(res.data);\r\n      });\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className=\"feed\">\r\n      <QuorBox />\r\n      {posts.map((_post) => (\r\n        <Post\r\n          key={_post._id}\r\n          questionId={_post._id}\r\n          question={_post.questionName}\r\n          imageUrl={_post.questionUrl}\r\n          timestamp={_post.createdAt}\r\n          users={_post.userDetails[0]}\r\n          answers={_post.allAnswers}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Quorans\\UserPost.js",["132","133","134","135","136","137","138"],"import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"../Post.css\";\r\nimport ArrowUpwardOutlinedIcon from \"@material-ui/icons/ArrowUpwardOutlined\";\r\nimport ArrowDownwardOutlinedIcon from \"@material-ui/icons/ArrowDownwardOutlined\";\r\nimport RepeatOutlinedIcon from \"@material-ui/icons/RepeatOutlined\";\r\nimport ChatBubbleOutlineOutlinedIcon from \"@material-ui/icons/ChatBubbleOutlineOutlined\";\r\nimport { BorderTop, MoreHorizOutlined, ShareOutlined } from \"@material-ui/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport parse from 'html-react-parser';\r\n\r\n// import db from \"../firebase\";\r\n// import { selectQuestionId, setQuestionInfo } from \"../features/questionSlice\";\r\nimport firebase from \"firebase\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport \"react-responsive-modal/styles.css\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport TimeAdded from \"../../../Utils/timeAgo\";\r\nimport { token } from \"../../../Utils/decodedToken\";\r\nimport axios from \"axios\";\r\n\r\nfunction Post({ questionId, key, question, imageUrl, timestamp, users, answers, length }) {\r\n  const dispatch = useDispatch();\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n\r\n  const [IsmodalOpen, setIsModalOpen] = useState(false);\r\n  // const questionId = useSelector(selectQuestionId);\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const [getAnswers, setGetAnswers] = useState(answers);\r\n\r\n  // console.log(answers)\r\n\r\n  const [show, setShow] = useState(false)\r\n  const Close = (\r\n    <CloseIcon\r\n      style={{\r\n        color: \"red\",\r\n        border: \" 2px solid lightgray\",\r\n        borderRadius: \"3px\",\r\n      }}\r\n    />\r\n  );\r\n\r\n  const handleQuill = (value) => {\r\n    setAnswer(value);\r\n  };\r\n\r\n  const handleModal = () => {\r\n    setIsModalOpen(true);\r\n    console.log(questionId);\r\n  };\r\n\r\n  const handleAnswer = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: token,\r\n      },\r\n    };\r\n    if (answer !== \"\") {\r\n      const body = {\r\n        answer: answer,\r\n        questionId: questionId,\r\n        userDetails: {\r\n          role: userLogin?.userInfo?.role,\r\n          userEmail: userLogin?.userInfo?.userEmail,\r\n          userId: userLogin?.userInfo?.userId,\r\n        },\r\n      };\r\n\r\n      await axios\r\n        .post(`/api/answers`, body, config)\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          alert('Answer added succesfully')\r\n          setIsModalOpen(false)\r\n          window.location.href = '/'\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n  return (<>\r\n  {\r\n      length !== 0 ? (<>\r\n      <div\r\n      key={key}\r\n      className=\"post\"\r\n      // onClick={() =>\r\n      //   // dispatch(\r\n      //   //   setQuestionInfo({\r\n      //   //     questionId: Id,\r\n      //   //     questionName: question,\r\n      //   //   })\r\n      //   // )\r\n      // }\r\n    >\r\n      <div className=\"post__info\">\r\n        <Avatar\r\n          src={\r\n            \"http://tinygraphs.com/labs/isogrids/hexa16/tinygraphs?theme=heatwave&numcolors=4&size=220&fmt=svg\"\r\n          }\r\n        />\r\n        <h4>{users?.name ? users?.name : users?.email}</h4>\r\n        {timestamp && (\r\n          <small>\r\n            <TimeAdded date={timestamp} />\r\n          </small>\r\n        )}\r\n      </div>\r\n      <div className=\"post__body\">\r\n        <div className=\"post__question\">\r\n          <p>{question}</p>\r\n          <button onClick={handleModal} className=\"post__btnAnswer\">\r\n            Answer\r\n          </button>\r\n\r\n          <Modal\r\n            open={IsmodalOpen}\r\n            onClose={() => setIsModalOpen(false)}\r\n            closeOnEsc={true}\r\n            center\r\n            closeOnOverlayClick={false}\r\n            closeIcon={Close}\r\n          >\r\n            <div className=\"modal__question\">\r\n              <h1>{question}</h1>\r\n              <p>\r\n                asked by{\" \"}\r\n                <span className=\"name\">\r\n                  {users?.name ? users?.name : users?.email}\r\n                </span>{\" \"}\r\n                {\"\"}\r\n                on{\" \"}\r\n                <span className=\"name\">\r\n                  {/* {timestamp && (\r\n                    <small>\r\n                      <TimeAdded date={timestamp} />\r\n                    </small>\r\n                  )} */}\r\n                  {new Date(timestamp).toLocaleString()}\r\n                </span>\r\n              </p>\r\n            </div>\r\n            <div className=\"modal__answer\">\r\n              <ReactQuill\r\n                value={answer}\r\n                onChange={handleQuill}\r\n                placeholder=\"Enter your answer\"\r\n              ></ReactQuill>\r\n            </div>\r\n            <div className=\"modal__button\">\r\n              <button className=\"cancle\" onClick={() => setIsModalOpen(false)}>\r\n                Cancel\r\n              </button>\r\n              <button type=\"sumbit\" onClick={handleAnswer} className=\"add\">\r\n                Add Answer\r\n              </button>\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n        <img style = {{\r\n          width: \"100%\",\r\n          objectFit: \"contain\"\r\n        }} src={imageUrl} alt=\"\" />\r\n        <div className=\"post__footer\">\r\n        <div className=\"post__footerAction\">\r\n          <ArrowUpwardOutlinedIcon />\r\n          <ArrowDownwardOutlinedIcon />\r\n        </div>\r\n\r\n        <RepeatOutlinedIcon />\r\n        <ChatBubbleOutlineOutlinedIcon />\r\n        <div className=\"post__footerLeft\">\r\n          <ShareOutlined />\r\n          <MoreHorizOutlined />\r\n        </div>\r\n      </div>\r\n        <p style = {{\r\n          color: \"rgba(0,0,0,0.5)\",\r\n          fontSize: \"12px\",\r\n          fontWeight: \"bold\",\r\n          margin: \"10px 0\"\r\n        }}>{answers.length} {`${answers.length < 2 ? 'Answer' : 'Answers'}`}</p>\r\n        <div style = {{\r\n              margin: \"5px 0px 0px 0px\",\r\n              padding: \"5px 0px 0px 20px\",\r\n              borderTop: \"1px solid lightgray\",\r\n            }} className=\"post__answer\">\r\n              \r\n          {\r\n            // answer comes here\r\n            getAnswers.map((_answer) => (<>\r\n            <div style = {{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              width: \"100%\",\r\n              padding: \"10px 5px\",\r\n              borderTop: \"1px solid lightgray\",\r\n            }} className = 'post-answer-container'>\r\n              <div style = {{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                marginBottom: \"10px\",fontSize: '12px',\r\n                fontWeight: \"600\",\r\n                color: \"#888\"\r\n              }} className = 'post-answered'>\r\n                <Avatar src = {\r\n                  \"http://tinygraphs.com/labs/isogrids/hexa16/tinygraphs?theme=heatwave&numcolors=4&size=220&fmt=svg\"\r\n                } />\r\n                <div style = {{\r\n                  margin: \"0px 10px\"\r\n                }} className = 'post-info'>\r\n                  \r\n                  <p style = {{\r\n                    margin: \"5px 0\"\r\n                  }}>{_answer?.userDetails?.userName ? _answer?.userDetails?.userName : _answer?.userDetails?.userEmail}</p>\r\n                  {\r\n                    _answer?.createdAt &&\r\n                    <span><TimeAdded date = {_answer.createdAt} /></span>\r\n                  }\r\n                  \r\n                </div>\r\n              </div>\r\n              <div className = 'post-answer'>\r\n                {parse(_answer.answer)}\r\n              </div>\r\n            </div>\r\n            </>))\r\n          }\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n      </>) : (<>\r\n      <img style = {{\r\n        //   padding: '20px',\r\n          borderRadius: \"10px\",\r\n          boxShadow: '2px 2px 12px lightgray'\r\n      }} width = {400} src = 'https://image.freepik.com/free-vector/empty-concept-illustration_114360-1188.jpg' alt = 'no question' />\r\n      </>)\r\n      }\r\n  </>\r\n      \r\n    \r\n  );\r\n}\r\n\r\nexport default Post;\r\n","E:\\Full stack web development course\\quora-working\\frontend\\src\\firebase.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\SidebarOptions.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\WidgetContent.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\Post.js",["139","140","141","142","143","144","145"],"import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Post.css\";\r\nimport ArrowUpwardOutlinedIcon from \"@material-ui/icons/ArrowUpwardOutlined\";\r\nimport ArrowDownwardOutlinedIcon from \"@material-ui/icons/ArrowDownwardOutlined\";\r\nimport RepeatOutlinedIcon from \"@material-ui/icons/RepeatOutlined\";\r\nimport ChatBubbleOutlineOutlinedIcon from \"@material-ui/icons/ChatBubbleOutlineOutlined\";\r\nimport { BorderTop, MoreHorizOutlined, ShareOutlined } from \"@material-ui/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport parse from 'html-react-parser';\r\n\r\n// import db from \"../firebase\";\r\n// import { selectQuestionId, setQuestionInfo } from \"../features/questionSlice\";\r\nimport firebase from \"firebase\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport \"react-responsive-modal/styles.css\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport TimeAdded from \"../../Utils/timeAgo\";\r\nimport { token } from \"../../Utils/decodedToken\";\r\nimport axios from \"axios\";\r\nimport { errorModal, successModal } from \"../../Utils/AlertModal\";\r\n\r\nfunction Post({ questionId, key, question, imageUrl, timestamp, users, answers }) {\r\n  const dispatch = useDispatch();\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n\r\n  const [IsmodalOpen, setIsModalOpen] = useState(false);\r\n  // const questionId = useSelector(selectQuestionId);\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const [getAnswers, setGetAnswers] = useState(answers);\r\n\r\n  // console.log(answers)\r\n\r\n  const [show, setShow] = useState(false)\r\n  const Close = (\r\n    <CloseIcon\r\n      style={{\r\n        color: \"red\",\r\n        border: \" 2px solid lightgray\",\r\n        borderRadius: \"3px\",\r\n      }}\r\n    />\r\n  );\r\n\r\n  const handleQuill = (value) => {\r\n    setAnswer(value);\r\n  };\r\n\r\n  const handleModal = () => {\r\n    setIsModalOpen(true);\r\n    console.log(questionId);\r\n  };\r\n\r\n  const handleAnswer = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: token,\r\n      },\r\n    };\r\n    if (answer !== \"\") {\r\n      const body = {\r\n        answer: answer,\r\n        questionId: questionId,\r\n        userDetails: {\r\n          role: userLogin?.userInfo?.role,\r\n          userEmail: userLogin?.userInfo?.userEmail,\r\n          userId: userLogin?.userInfo?.userId,\r\n        },\r\n      };\r\n\r\n      await axios\r\n        .post(`/api/answers`, body, config)\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          successModal('Answer added successfully')\r\n          // alert('Answer added succesfully')\r\n          setIsModalOpen(false)\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          errorModal('Error while adding question')\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      key={key}\r\n      className=\"post\"\r\n      // onClick={() =>\r\n      //   // dispatch(\r\n      //   //   setQuestionInfo({\r\n      //   //     questionId: Id,\r\n      //   //     questionName: question,\r\n      //   //   })\r\n      //   // )\r\n      // }\r\n    >\r\n      <div className=\"post__info\">\r\n        <Avatar\r\n          src={\r\n            \"http://tinygraphs.com/labs/isogrids/hexa16/tinygraphs?theme=heatwave&numcolors=4&size=220&fmt=svg\"\r\n          }\r\n        />\r\n        <h4>{users?.name ? users?.name : users?.email}</h4>\r\n        {timestamp && (\r\n          <small>\r\n            <TimeAdded date={timestamp} />\r\n          </small>\r\n        )}\r\n      </div>\r\n      <div className=\"post__body\">\r\n        <div className=\"post__question\">\r\n          <p>{question}</p>\r\n          <button onClick={handleModal} className=\"post__btnAnswer\">\r\n            Answer\r\n          </button>\r\n\r\n          <Modal\r\n            open={IsmodalOpen}\r\n            onClose={() => setIsModalOpen(false)}\r\n            closeOnEsc={true}\r\n            center\r\n            closeOnOverlayClick={false}\r\n            closeIcon={Close}\r\n          >\r\n            <div className=\"modal__question\">\r\n              <h1>{question}</h1>\r\n              <p>\r\n                asked by{\" \"}\r\n                <span className=\"name\">\r\n                  {users?.name ? users?.name : users?.email}\r\n                </span>{\" \"}\r\n                {\"\"}\r\n                on{\" \"}\r\n                <span className=\"name\">\r\n                  {/* {timestamp && (\r\n                    <small>\r\n                      <TimeAdded date={timestamp} />\r\n                    </small>\r\n                  )} */}\r\n                  {new Date(timestamp).toLocaleString()}\r\n                </span>\r\n              </p>\r\n            </div>\r\n            <div className=\"modal__answer\">\r\n              <ReactQuill\r\n                value={answer}\r\n                onChange={handleQuill}\r\n                placeholder=\"Enter your answer\"\r\n              ></ReactQuill>\r\n            </div>\r\n            <div className=\"modal__button\">\r\n              <button className=\"cancle\" onClick={() => setIsModalOpen(false)}>\r\n                Cancel\r\n              </button>\r\n              <button type=\"sumbit\" onClick={handleAnswer} className=\"add\">\r\n                Add Answer\r\n              </button>\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n        <img style = {{\r\n          width: \"100%\",\r\n          objectFit: \"contain\"\r\n        }} src={imageUrl} alt=\"\" />\r\n        <div className=\"post__footer\">\r\n        <div className=\"post__footerAction\">\r\n          <ArrowUpwardOutlinedIcon />\r\n          <ArrowDownwardOutlinedIcon />\r\n        </div>\r\n\r\n        <RepeatOutlinedIcon />\r\n        <ChatBubbleOutlineOutlinedIcon />\r\n        <div className=\"post__footerLeft\">\r\n          <ShareOutlined />\r\n          <MoreHorizOutlined />\r\n        </div>\r\n      </div>\r\n        <p style = {{\r\n          color: \"rgba(0,0,0,0.5)\",\r\n          fontSize: \"12px\",\r\n          fontWeight: \"bold\",\r\n          margin: \"10px 0\"\r\n        }}>{answers.length} {`${answers.length < 2 ? 'Answer' : 'Answers'}`}</p>\r\n        <div style = {{\r\n              margin: \"5px 0px 0px 0px\",\r\n              padding: \"5px 0px 0px 20px\",\r\n              borderTop: \"1px solid lightgray\",\r\n            }} className=\"post__answer\">\r\n              \r\n          {\r\n            // answer comes here\r\n            getAnswers.map((_answer) => (<>\r\n            <div style = {{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              width: \"100%\",\r\n              padding: \"10px 5px\",\r\n              borderTop: \"1px solid lightgray\",\r\n            }} className = 'post-answer-container'>\r\n              <div style = {{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                marginBottom: \"10px\",fontSize: '12px',\r\n                fontWeight: \"600\",\r\n                color: \"#888\"\r\n              }} className = 'post-answered'>\r\n                <Avatar src = {\r\n                  \"http://tinygraphs.com/labs/isogrids/hexa16/tinygraphs?theme=heatwave&numcolors=4&size=220&fmt=svg\"\r\n                } />\r\n                <div style = {{\r\n                  margin: \"0px 10px\"\r\n                }} className = 'post-info'>\r\n                  \r\n                  <p style = {{\r\n                    margin: \"5px 0\"\r\n                  }}>{_answer?.userDetails?.userName ? _answer?.userDetails?.userName : _answer?.userDetails?.userEmail}</p>\r\n                  {\r\n                    _answer?.createdAt &&\r\n                    <span><TimeAdded date = {_answer.createdAt} /></span>\r\n                  }\r\n                  \r\n                </div>\r\n              </div>\r\n              <div className = 'post-answer'>\r\n                {parse(_answer.answer)}\r\n              </div>\r\n            </div>\r\n            </>))\r\n          }\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\QuorBox.js",["146"],"E:\\Full stack web development course\\quora-working\\frontend\\src\\Utils\\timeAgo.js",[],"E:\\Full stack web development course\\quora-working\\frontend\\src\\components\\QuoraLanding\\AddQuestionModel.js",["147"],"import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ExpandMore } from \"@material-ui/icons\";\r\nimport PeopleAltOutlinedIcon from \"@material-ui/icons/PeopleAltOutlined\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport { token } from \"../../Utils/decodedToken\";\r\nimport { successModal } from \"../../Utils/AlertModal\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nexport const AddQuestion = (props) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [input, setInput] = useState(\"\");\r\n    const [inputUrl, setInputUrl] = useState(\"\");\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n\r\n    const handleQuestion = async (e) => {\r\n        e.preventDefault();\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                authorization: token,\r\n            },\r\n        };\r\n        if (input !== \"\") {\r\n            const body = {\r\n                questionName: input,\r\n                questionUrl: inputUrl,\r\n                userId: userLogin?.userInfo?.userId\r\n            };\r\n            await axios\r\n                .post(\"/api/questions\", body, config)\r\n                .then((res) => {\r\n                    console.log(res.data);\r\n                    console.log(\"question added successfully\");\r\n                    setIsModalOpen(false);\r\n                    successModal('Question added successfully')\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n\r\n        setInput(\"\");\r\n        setInputUrl(\"\");\r\n    };\r\n    return (\r\n        <div className='qHeaderButton'>\r\n\r\n            <Button onClick={() => setIsModalOpen(true)}>\r\n                {props.title}\r\n            </Button>\r\n\r\n            <Modal\r\n                open={isModalOpen}\r\n\r\n                onClose={() => setIsModalOpen(false)}\r\n                closeOnEsc\r\n                center\r\n                closeOnOverlayClick={false}\r\n                styles={{\r\n                    overlay: {\r\n                        height: \"auto\",\r\n\r\n                    }\r\n                }}\r\n            >\r\n                <div className='modal_box'>\r\n                    <div className=\"modal__title\">\r\n                        <h5>Add Question</h5>\r\n                        <h5>Share Link</h5>\r\n                    </div>\r\n                    <div className=\"modal__info\">\r\n                        <Avatar className=\"avatar\" />\r\n                        <div className=\"modal__scope\">\r\n                            <p><PeopleAltOutlinedIcon /></p>\r\n                            <p>Public</p>\r\n                            <p><ExpandMore /></p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"modal__Field\">\r\n                        <input\r\n                            onChange={(e) => {\r\n                                setInput(e.target.value)\r\n                            }}\r\n                            value={input}\r\n                            type=\" text\"\r\n                            placeholder=\"Start your question with 'What', 'How', 'Why', etc. \"\r\n                        />\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                            }}\r\n                        >\r\n                            <input\r\n                                type=\"text\"\r\n                                value={inputUrl}\r\n                                onChange={(e) => setInputUrl(e.target.value)}\r\n                                style={{\r\n                                    margin: \"5px 0\",\r\n                                    border: \"1px solid lightgray\",\r\n                                    padding: \"10px\",\r\n                                    outline: \"2px solid #000\",\r\n                                }}\r\n                                placeholder=\"Optional: inclue a link that gives context\"\r\n                            />\r\n                            {inputUrl !== \"\" && <img style={{\r\n                                height: \"40vh\",\r\n                                objectFit: \"contain\"\r\n                            }} src={inputUrl} alt=\"image not found\" />}\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"modal__buttons\">\r\n                        <button className=\"cancle\" onClick={() => setIsModalOpen(false)}>\r\n                            Cancel\r\n                        </button>\r\n                        <button type='submit' className='add' onClick={handleQuestion}>\r\n                            Add Question\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":15},{"ruleId":"152","severity":1,"message":"156","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"157","line":14,"column":23,"nodeType":"154","messageId":"155","endLine":14,"endColumn":34},{"ruleId":"152","severity":1,"message":"158","line":31,"column":9,"nodeType":"154","messageId":"155","endLine":31,"endColumn":14},{"ruleId":"152","severity":1,"message":"159","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":10},{"ruleId":"152","severity":1,"message":"160","line":2,"column":17,"nodeType":"154","messageId":"155","endLine":2,"endColumn":26},{"ruleId":"152","severity":1,"message":"161","line":8,"column":10,"nodeType":"154","messageId":"155","endLine":8,"endColumn":19},{"ruleId":"152","severity":1,"message":"162","line":15,"column":8,"nodeType":"154","messageId":"155","endLine":15,"endColumn":16},{"ruleId":"152","severity":1,"message":"163","line":25,"column":9,"nodeType":"154","messageId":"155","endLine":25,"endColumn":17},{"ruleId":"152","severity":1,"message":"164","line":31,"column":22,"nodeType":"154","messageId":"155","endLine":31,"endColumn":35},{"ruleId":"152","severity":1,"message":"165","line":35,"column":10,"nodeType":"154","messageId":"155","endLine":35,"endColumn":14},{"ruleId":"152","severity":1,"message":"166","line":35,"column":16,"nodeType":"154","messageId":"155","endLine":35,"endColumn":23},{"ruleId":"152","severity":1,"message":"160","line":2,"column":17,"nodeType":"154","messageId":"155","endLine":2,"endColumn":26},{"ruleId":"152","severity":1,"message":"161","line":8,"column":10,"nodeType":"154","messageId":"155","endLine":8,"endColumn":19},{"ruleId":"152","severity":1,"message":"162","line":15,"column":8,"nodeType":"154","messageId":"155","endLine":15,"endColumn":16},{"ruleId":"152","severity":1,"message":"163","line":26,"column":9,"nodeType":"154","messageId":"155","endLine":26,"endColumn":17},{"ruleId":"152","severity":1,"message":"164","line":32,"column":22,"nodeType":"154","messageId":"155","endLine":32,"endColumn":35},{"ruleId":"152","severity":1,"message":"165","line":36,"column":10,"nodeType":"154","messageId":"155","endLine":36,"endColumn":14},{"ruleId":"152","severity":1,"message":"166","line":36,"column":16,"nodeType":"154","messageId":"155","endLine":36,"endColumn":23},{"ruleId":"152","severity":1,"message":"167","line":8,"column":7,"nodeType":"154","messageId":"155","endLine":8,"endColumn":18},{"ruleId":"168","severity":1,"message":"169","line":109,"column":49,"nodeType":"170","endLine":112,"endColumn":71},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'Sidebar' is defined but never used.","Identifier","unusedVar","'Widget' is defined but never used.","'useSelector' is defined but never used.","'Close' is assigned a value but never used.","'db' is defined but never used.","'useEffect' is defined but never used.","'BorderTop' is defined but never used.","'firebase' is defined but never used.","'dispatch' is assigned a value but never used.","'setGetAnswers' is assigned a value but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'addQuestion' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]